import { useState, useEffect, useRef } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Input } from '@/components/ui/input'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Play, Square, RotateCcw, Plus, Trash2, Copy, Music, Clock, GripVertical, Scissors, Loader2 } from 'lucide-react'
import { Track } from '@/hooks/useBeatMaker'

interface PatternBlock {
  id: string
  name: string
  tracks: Track[]
  sequencerData: {[trackId: number]: boolean[]}
  bpm: number
  steps: number
  duration: number // in bars
  startBar: number
  endBar: number
  color: string
  trackId: number // which track this pattern belongs to
}

interface SongArrangementProps {
  tracks: Track[]
  sequencerData: {[trackId: number]: boolean[]}
  bpm: number
  steps: number
  onPlayPattern?: (patternData: {[trackId: number]: boolean[]}) => void
  onStopPattern?: () => void
  isPlaying?: boolean
}

export function SongArrangement({
  tracks,
  sequencerData,
  bpm,
  steps,
  onPlayPattern,
  onStopPattern,
  isPlaying = false
}: SongArrangementProps) {
  const [patternBlocks, setPatternBlocks] = useState<PatternBlock[]>([])
  const [currentPattern, setCurrentPattern] = useState<PatternBlock | null>(null)
  const [isArrangementPlaying, setIsArrangementPlaying] = useState(false)
  const [currentBar, setCurrentBar] = useState(1)
  const [totalBars, setTotalBars] = useState(32) // Default 32 bars
  const [zoom, setZoom] = useState(50) // pixels per bar
  const [scrollX, setScrollX] = useState(0)
  const [selectedBlocks, setSelectedBlocks] = useState<string[]>([])
  const [isDragging, setIsDragging] = useState(false)
  const [dragStart, setDragStart] = useState({ x: 0, y: 0 })
  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 })
  const [loadedTrackId, setLoadedTrackId] = useState<number | null>(null) // which track is in "load" mode
  const [selectedDuration, setSelectedDuration] = useState(8) // default 8 bars for new patterns

  const timelineRef = useRef<HTMLDivElement>(null)
  const gridRef = useRef<HTMLDivElement>(null)

  // Toggle load mode for a track
  const toggleLoadMode = (trackId: number) => {
    if (loadedTrackId === trackId) {
      setLoadedTrackId(null) // Turn off load mode
    } else {
      setLoadedTrackId(trackId) // Turn on load mode for this track
    }
  }

  // Handle clicking in the grid to place a pattern
  const handleGridClick = (e: React.MouseEvent) => {
    if (!loadedTrackId) return // No track is in load mode
    
    const rect = gridRef.current?.getBoundingClientRect()
    if (!rect) return
    
    const clickX = e.clientX - rect.left + scrollX
    const clickY = e.clientY - rect.top
    
    // Calculate which bar was clicked
    const clickedBar = Math.floor(clickX / zoom) + 1
    
    // Calculate which track was clicked
    const clickedTrackIndex = Math.floor(clickY / 60)
    const clickedTrack = tracks[clickedTrackIndex]
    
    if (!clickedTrack) return
    
    // Create a new pattern block at the clicked position
    const newBlock: PatternBlock = {
      id: `pattern-${Date.now()}-${Math.random()}`,
      name: `${clickedTrack.name} Pattern`,
      tracks: [clickedTrack], // Single track pattern
      sequencerData: { [clickedTrack.id]: sequencerData[clickedTrack.id] || [] },
      bpm: bpm,
      steps: steps,
      duration: selectedDuration,
      startBar: clickedBar,
      endBar: clickedBar + selectedDuration - 1,
      color: clickedTrack.color,
      trackId: clickedTrack.id
    }

    setPatternBlocks(prev => [...prev, newBlock])
    setTotalBars(Math.max(totalBars, newBlock.endBar))
  }

  // Get a random color for pattern blocks
  const getRandomColor = () => {
    const colors = [
      'bg-red-500', 'bg-blue-500', 'bg-green-500', 'bg-yellow-500',
      'bg-purple-500', 'bg-pink-500', 'bg-indigo-500', 'bg-orange-500',
      'bg-teal-500', 'bg-cyan-500', 'bg-lime-500', 'bg-rose-500'
    ]
    return colors[Math.floor(Math.random() * colors.length)]
  }

  // Remove a pattern block
  const removePatternBlock = (blockId: string) => {
    setPatternBlocks(prev => prev.filter(block => block.id !== blockId))
  }

  // Duplicate a pattern block
  const duplicatePatternBlock = (block: PatternBlock) => {
    const newBlock: PatternBlock = {
      ...block,
      id: `pattern-${Date.now()}-${Math.random()}`,
      name: `${block.name} (Copy)`,
      startBar: block.endBar + 1,
      endBar: block.endBar + block.duration
    }

    setPatternBlocks(prev => [...prev, newBlock])
    setTotalBars(Math.max(totalBars, newBlock.endBar))
  }

  // Play a specific pattern block
  const playPatternBlock = (block: PatternBlock) => {
    setCurrentPattern(block)
    onPlayPattern?.(block.sequencerData)
  }

  // Play the entire arrangement
  const playArrangement = () => {
    if (patternBlocks.length === 0) {
      alert('No pattern blocks to play')
      return
    }

    setIsArrangementPlaying(true)
    setCurrentBar(1)
    
    // Start with the first pattern
    const firstBlock = patternBlocks[0]
    setCurrentPattern(firstBlock)
    onPlayPattern?.(firstBlock.sequencerData)
  }

  // Stop the arrangement
  const stopArrangement = () => {
    setIsArrangementPlaying(false)
    setCurrentPattern(null)
    setCurrentBar(1)
    onStopPattern?.()
  }

  // Calculate time position for a bar
  const getBarTime = (barNumber: number) => {
    const secondsPerBeat = 60 / bpm
    const beatsPerBar = 4 // Assuming 4/4 time signature
    const secondsPerBar = secondsPerBeat * beatsPerBar
    return (barNumber - 1) * secondsPerBar
  }

  // Format time as MM:SS
  const formatTime = (seconds: number) => {
    const minutes = Math.floor(seconds / 60)
    const remainingSeconds = Math.floor(seconds % 60)
    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`
  }

  // Handle mouse down on pattern block for selection/dragging
  const handleBlockMouseDown = (e: React.MouseEvent, blockId: string) => {
    e.preventDefault()
    e.stopPropagation()
    
    if (e.ctrlKey || e.metaKey) {
      // Multi-select
      setSelectedBlocks(prev => 
        prev.includes(blockId) 
          ? prev.filter(id => id !== blockId)
          : [...prev, blockId]
      )
    } else {
      // Single select
      setSelectedBlocks([blockId])
    }
    
    setIsDragging(true)
    setDragStart({ x: e.clientX, y: e.clientY })
    setDragOffset({ x: 0, y: 0 })
  }

  // Handle mouse move for dragging
  const handleMouseMove = (e: React.MouseEvent) => {
    if (!isDragging) return
    
    const deltaX = e.clientX - dragStart.x
    const deltaY = e.clientY - dragStart.y
    
    setDragOffset({ x: deltaX, y: deltaY })
  }

  // Handle mouse up to end dragging
  const handleMouseUp = () => {
    if (isDragging) {
      setIsDragging(false)
      setDragOffset({ x: 0, y: 0 })
    }
  }

  // Add event listeners for mouse move and up
  useEffect(() => {
    if (isDragging) {
      document.addEventListener('mousemove', handleMouseMove as any)
      document.addEventListener('mouseup', handleMouseUp)
      return () => {
        document.removeEventListener('mousemove', handleMouseMove as any)
        document.removeEventListener('mouseup', handleMouseUp)
      }
    }
  }, [isDragging, dragStart])

  // Generate timeline markers
  const timelineMarkers = Array.from({ length: totalBars }, (_, i) => i + 1)

  return (
    <div className="space-y-4">
      {/* Toolbar */}
      <Card className="!bg-[#141414] border-gray-700">
        <CardHeader className="pb-3">
          <div className="flex items-center justify-between">
            <CardTitle className="text-white text-lg">Song Arrangement</CardTitle>
            <div className="flex items-center gap-4">
              <div className="flex items-center gap-2">
                <span className="text-gray-300 text-sm">Pattern Duration:</span>
                <Select value={selectedDuration.toString()} onValueChange={(value) => setSelectedDuration(parseInt(value))}>
                  <SelectTrigger className="w-20 h-8 bg-gray-700 border-gray-600 text-white text-xs">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent className="bg-gray-800 border-gray-600">
                    <SelectItem value="4">4 Bars</SelectItem>
                    <SelectItem value="8">8 Bars</SelectItem>
                    <SelectItem value="16">16 Bars</SelectItem>
                    <SelectItem value="32">32 Bars</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div className="flex items-center gap-2">
                <span className="text-gray-300 text-sm">Zoom:</span>
                <input
                  type="range"
                  min="20"
                  max="100"
                  value={zoom}
                  onChange={(e) => setZoom(parseInt(e.target.value))}
                  className="w-24 h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer slider"
                />
                <span className="text-gray-300 text-xs">{zoom}px/bar</span>
              </div>
              <div className="flex items-center gap-2">
                <Badge variant="outline" className="text-xs">
                  {bpm} BPM
                </Badge>
                <Badge variant="outline" className="text-xs">
                  {totalBars} Bars
                </Badge>
                <Badge variant="outline" className="text-xs">
                  {formatTime(getBarTime(totalBars + 1))}
                </Badge>
              </div>
            </div>
          </div>
        </CardHeader>
        <CardContent className="pt-0">
          <div className="flex items-center gap-4">
            <Button
              onClick={isArrangementPlaying ? stopArrangement : playArrangement}
              variant={isArrangementPlaying ? "destructive" : "default"}
              size="lg"
              className="w-16 h-16 rounded-full"
              disabled={patternBlocks.length === 0}
            >
              {isArrangementPlaying ? <Square className="w-6 h-6" /> : <Play className="w-6 h-6" />}
            </Button>
            <Button
              onClick={stopArrangement}
              variant="outline"
              size="sm"
            >
              <RotateCcw className="w-4 h-4" />
            </Button>
            <div className="text-gray-300 text-sm">
              {isArrangementPlaying ? `Playing: Bar ${currentBar}` : 'Ready to play'}
            </div>
            {loadedTrackId && (
              <div className="flex items-center gap-2 ml-4">
                <Badge variant="outline" className="text-xs bg-green-600 text-white border-green-500">
                  <Loader2 className="w-3 h-3 mr-1 animate-spin" />
                  Load Mode Active
                </Badge>
                <span className="text-green-400 text-sm">
                  Click in grid to place {tracks.find(t => t.id === loadedTrackId)?.name} pattern
                </span>
              </div>
            )}
          </div>
        </CardContent>
      </Card>

      {/* DAW-Style Arrangement Grid */}
      <Card className="!bg-[#141414] border-gray-700">
        <CardContent className="p-0">
          <div className="relative">
            {/* Main scrollable container that includes both header and grid */}
            <div 
              ref={gridRef}
              className="relative overflow-auto"
              style={{ height: '460px' }}
              onScroll={(e) => setScrollX(e.currentTarget.scrollLeft)}
              onClick={handleGridClick}
            >
              {/* Timeline Header - Scrolls with grid */}
              <div 
                className="sticky top-0 z-10 bg-[#1a1a1a] border-b border-gray-600"
                style={{ height: '60px' }}
              >
                <div className="flex items-end h-full">
                  {/* Track names column - Fixed */}
                  <div className="w-48 flex-shrink-0 border-r border-gray-600 bg-[#1a1a1a]"></div>
                  
                  {/* Timeline markers - Scrolls with grid */}
                  <div className="flex-1 relative">
                    <div 
                      className="flex h-full"
                      style={{ 
                        width: `${totalBars * zoom}px`
                      }}
                    >
                      {timelineMarkers.map((bar) => (
                        <div
                          key={bar}
                          className="flex-shrink-0 border-r border-gray-600 text-xs text-gray-400 font-mono"
                          style={{ width: `${zoom}px` }}
                        >
                          <div className="h-6 flex items-center justify-center border-b border-gray-600">
                            {bar}
                          </div>
                          <div className="h-6 flex items-center justify-center">
                            {formatTime(getBarTime(bar))}
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              </div>

              {/* Arrangement Grid Content - Same structure as header */}
              <div className="flex">
                {/* Track names column - Fixed */}
                <div className="w-48 flex-shrink-0 border-r border-gray-600 bg-[#1a1a1a]"></div>
                
                {/* Grid content - Same flex-1 structure as header */}
                <div className="flex-1 relative">
                  <div 
                    className="relative"
                    style={{ 
                      width: `${totalBars * zoom}px`,
                      height: `${tracks.length * 60}px`
                    }}
                  >
                    {/* Grid background */}
                    <div className="absolute inset-0 bg-[#0f0f0f]"></div>
                    
                    {/* Track Grid - Each track row uses same flexbox system as header */}
                    {tracks.map((track, trackIndex) => (
                      <div
                        key={track.id}
                        className="flex absolute"
                        style={{ 
                          top: `${trackIndex * 60}px`,
                          height: '60px',
                          width: `${totalBars * zoom}px`
                        }}
                      >
                        {timelineMarkers.map((bar) => (
                          <div
                            key={bar}
                            className="flex-shrink-0 border-r border-gray-700"
                            style={{ width: `${zoom}px` }}
                          ></div>
                        ))}
                      </div>
                    ))}
                    
                    {/* Horizontal track separators */}
                    <div className="absolute inset-0">
                      {tracks.map((track, index) => (
                        <div
                          key={track.id}
                          className="absolute left-0 right-0 border-b border-gray-700"
                          style={{ 
                            top: `${index * 60}px`,
                            height: '1px'
                          }}
                        ></div>
                      ))}
                    </div>
                  </div>
                </div>
              </div>

                    {/* Pattern Blocks */}
                    {patternBlocks.map((block) => (
                      <div
                        key={block.id}
                        className={`absolute cursor-move select-none ${
                          selectedBlocks.includes(block.id) 
                            ? 'ring-2 ring-blue-500 ring-opacity-50' 
                            : ''
                        }`}
                        style={{
                          left: `${(block.startBar - 1) * zoom}px`,
                          top: `${tracks.findIndex(t => t.id === block.trackId) * 60 + 5}px`,
                          width: `${block.duration * zoom}px`,
                          height: '50px',
                          transform: isDragging && selectedBlocks.includes(block.id) 
                            ? `translate(${dragOffset.x}px, ${dragOffset.y}px)` 
                            : 'none'
                        }}
                        onMouseDown={(e) => handleBlockMouseDown(e, block.id)}
                      >
                        <div className={`h-full rounded border-2 border-gray-600 ${block.color} bg-opacity-80 relative group`}>
                          {/* Block header */}
                          <div className="absolute top-0 left-0 right-0 h-6 bg-black bg-opacity-50 rounded-t flex items-center justify-between px-2">
                            <div className="flex items-center gap-2">
                              <GripVertical className="w-3 h-3 text-gray-400" />
                              <span className="text-white text-xs font-medium truncate">{block.name}</span>
                            </div>
                            <div className="flex items-center gap-1 opacity-0 group-hover:opacity-100 transition-opacity">
                              <Button
                                size="sm"
                                variant="ghost"
                                className="w-5 h-5 p-0 hover:bg-white hover:bg-opacity-20"
                                onClick={(e) => {
                                  e.stopPropagation()
                                  playPatternBlock(block)
                                }}
                                title="Play pattern"
                              >
                                <Play className="w-2 h-2" />
                              </Button>
                              <Button
                                size="sm"
                                variant="ghost"
                                className="w-5 h-5 p-0 hover:bg-white hover:bg-opacity-20"
                                onClick={(e) => {
                                  e.stopPropagation()
                                  duplicatePatternBlock(block)
                                }}
                                title="Duplicate pattern"
                              >
                                <Copy className="w-2 h-2" />
                              </Button>
                              <Button
                                size="sm"
                                variant="ghost"
                                className="w-5 h-5 p-0 hover:bg-white hover:bg-opacity-20 text-red-400"
                                onClick={(e) => {
                                  e.stopPropagation()
                                  removePatternBlock(block.id)
                                }}
                                title="Delete pattern"
                              >
                                <Trash2 className="w-2 h-2" />
                              </Button>
                            </div>
                          </div>
                          
                          {/* Block content */}
                          <div className="absolute top-6 left-0 right-0 bottom-0 flex items-center justify-center">
                            <span className="text-white text-xs font-mono">
                              {block.duration} bars
                            </span>
                          </div>
                        </div>
                      </div>
                    ))}

                    {/* Track lanes background with Load buttons - Fixed position */}
                    <div className="absolute left-0 top-0 w-48 h-full bg-[#1a1a1a] border-r border-gray-600 z-10">
                      {tracks.map((track, index) => (
                        <div
                          key={track.id}
                          className="flex items-center justify-between border-b border-gray-600 px-3"
                          style={{ height: '60px' }}
                        >
                          <div className="flex items-center gap-2 flex-1">
                            <div className={`w-3 h-3 rounded-full ${track.color}`}></div>
                            <span className="text-white text-sm truncate">{track.name}</span>
                          </div>
                          <Button
                            size="sm"
                            variant={loadedTrackId === track.id ? "default" : "outline"}
                            className={`w-8 h-8 p-0 text-xs ${
                              loadedTrackId === track.id 
                                ? 'bg-green-600 hover:bg-green-700 text-white' 
                                : 'bg-gray-700 hover:bg-gray-600 text-gray-300'
                            }`}
                            onClick={() => toggleLoadMode(track.id)}
                            title={loadedTrackId === track.id ? "Click to turn off load mode" : "Click to load pattern for placement"}
                          >
                            {loadedTrackId === track.id ? <Loader2 className="w-3 h-3 animate-spin" /> : "L"}
                          </Button>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  )
} 